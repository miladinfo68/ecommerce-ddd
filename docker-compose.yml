version: '3.7'

services:
  postgres:
    image: postgres
    container_name: postgresql
    environment:
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
    command: >
      postgres -c wal_level=logical -c max_wal_senders=5 -c max_replication_slots=5
    ports:
      - '5432:5432'
    networks:
      - ecommercedddnet
    volumes:
      - './scripts/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql'
    restart: 
      on-failure
    
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL}'
      PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD}'
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - 'pgadmin:/var/lib/pgadmin'
    ports:
      - '5433:80'
    networks:
      - ecommercedddnet
    restart:
      on-failure
    depends_on:
      - postgres
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - ecommercedddnet
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: 
      on-failure

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    container_name: kafka
    networks:
      - ecommercedddnet
    ports:
      - '29092:29092'
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

    restart: 
      on-failure
    depends_on:
      - zookeeper
  
  init-kafka:
    image: confluentinc/cp-kafka:7.0.1   
    container_name: init-kafka
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - ecommercedddnet
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
    command: |
      "
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Orders --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Payments --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Shipments --replication-factor 1 --partitions 1
      "
    depends_on:
    - kafka

  kafka_topics_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_topics_ui
    hostname: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092'
    networks:
      - ecommercedddnet
    restart: 
      on-failure
    depends_on:
      - kafka
      - zookeeper

  connect:
    image: debezium/connect
    container_name: connect
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: 'kafka:9092'
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: CONNECT_CONFIGS
      OFFSET_STORAGE_TOPIC: CONNECT_OFFSETS
      STATUS_STORAGE_TOPIC: CONNECT_STATUSES    
    networks:
      - ecommercedddnet
    restart: 
      on-failure
    depends_on:
      - postgres
      - kafka


#  ecommerceddd-identityserver:
#    image: ecommerceddd-identityserver
#    container_name: ecommerceddd-identityserver
#    build:
#      context: .
#      dockerfile: src/Crosscutting/EcommerceDDD.IdentityServer/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'    
#      ConnectionStrings__IdentityConnection: "host=postgresql;port=5432;timeout=15;pooling=True;minpoolsize=1;maxpoolsize=100;database='identityserverdb';User Id='postgres';pwd='P@55w0rd'"      
#    ports:
#      - '5002:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-identityserver:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart: 
#      on-failure

#  ecommerceddd-apigateway:
#    image: ecommerceddd-apigateway
#    container_name: ecommerceddd-apigateway
#    build:
#      context: .
#      dockerfile: src/Crosscutting/EcommerceDDD.ApiGateway/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'
#    ports:
#      - '5000:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-apigateway:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart:
#      on-failure
#    depends_on:
#      - postgres
#      - ecommerceddd-identityserver


#  # Services
#  ecommerceddd-customers:
#    image: ecommerceddd-customers
#    container_name: ecommerceddd-customers
#    build:
#      context: .
#      dockerfile: src/Services/EcommerceDDD.CustomerManagement/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'
#    ports:
#      - '5004:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-customers:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart:
#      on-failure
#    depends_on:
#      - postgres
#      - ecommerceddd-identityserver
#      - ecommerceddd-apigateway
#
#  ecommerceddd-products:
#    image: ecommerceddd-products
#    container_name: ecommerceddd-products
#    build:
#      context: .
#      dockerfile: src/Services/EcommerceDDD.ProductCatalog/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'
#    ports:
#      - '5006:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-products:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart:
#      on-failure
#    depends_on:
#      - postgres      
#      - ecommerceddd-identityserver
#      - ecommerceddd-apigateway
#
#  ecommerceddd-inventory:
#    image: ecommerceddd-inventory
#    container_name: ecommerceddd-inventory
#    build:
#      context: .
#      dockerfile: src/Services/EcommerceDDD.InventoryManagement/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'
#    ports:
#      - '5008:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-inventory:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart:
#      on-failure
#    depends_on:
#      - postgres      
#      - ecommerceddd-identityserver
#      - ecommerceddd-apigateway
#      - ecommerceddd-products
#
#  ecommerceddd-quotes:
#    image: ecommerceddd-quotes
#    container_name: ecommerceddd-quotes
#    build:
#      context: .
#      dockerfile: src/Services/EcommerceDDD.QuoteManagement/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'
#    ports:
#      - '5010:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-quotes:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart: 
#      on-failure
#    depends_on:
#      - postgres      
#      - ecommerceddd-identityserver
#      - ecommerceddd-apigateway
#
#  ecommerceddd-orders:
#    image: ecommerceddd-orders
#    container_name: ecommerceddd-orders
#    build:
#      context: .
#      dockerfile: src/Services/EcommerceDDD.OrderProcessing/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'
#    ports:
#      - '5012:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-orders:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart:
#      on-failure
#    depends_on:
#      - postgres      
#      - ecommerceddd-identityserver
#      - ecommerceddd-apigateway
#      - kafka
#      - connect
#
#  ecommerceddd-payments:
#    image: ecommerceddd-payments
#    container_name: ecommerceddd-payments
#    build:
#      context: .
#      dockerfile: src/Services/EcommerceDDD.PaymentProcessing/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'    
#    ports:
#      - '5014:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-payments:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart:
#      on-failure
#    depends_on:
#      - postgres      
#      - ecommerceddd-identityserver
#      - ecommerceddd-apigateway
#      - kafka
#      - connect
#
#  ecommerceddd-shipments:
#    image: ecommerceddd-shipments
#    container_name: ecommerceddd-shipments
#    build:
#      context: .
#      dockerfile: src/Services/EcommerceDDD.ShipmentProcessing/Dockerfile
#    environment:
#      ASPNETCORE_ENVIRONMENT: '${ASPNETCORE_ENVIRONMENT:-Development}'
#      ASPNETCORE_URLS: 'http://+:80'
#    ports:
#      - '5016:80'
#    networks:
#      - ecommercedddnet
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://ecommerceddd-shipments:80/health"]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#    restart:
#      on-failure
#    depends_on:
#      - postgres      
#      - ecommerceddd-identityserver
#      - ecommerceddd-apigateway
#      - kafka
#      - connect

networks:
  ecommercedddnet:
    driver: bridge

volumes:
  postgres:
  pgadmin:
